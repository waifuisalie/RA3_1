# ============================================================
# TESTE DE ESTRESSE - ANALISADOR SEMÂNTICO RA3
# Objetivo: Testar limites, aninhamentos extremos e edge cases
# Cobertura: Gaps críticos não testados nos outros 11 arquivos
# Total: ~95 linhas de código RPN
# ============================================================

# === SEÇÃO 1: EDGE CASES CRÍTICOS ===
# Potência com expoente 0 (qualquer número^0 = 1)
(5 0 ^)
# Divisão por 1 (identidade)
(100 1 /)
# Módulo de número menor pelo maior
(3 7 %)
# Multiplicação por 0
(999 0 *)
# Potência de 1
(1 5 ^)

# === SEÇÃO 2: PROMOÇÃO DE TIPOS EM CASCATA ===
# int → real → real → real
(((((5 2.0 +) 3 *) 4.0 -) 2 |) 1.5 +) CASCADE)
# Múltiplas promoções aninhadas
(((10 3.5 +) 2 *) ((7 1.5 -) 3 |) +) PROMO_MULTI)

# === SEÇÃO 3: EXPRESSÕES EXTREMAMENTE LONGAS ===
# 15+ operadores numa única expressão
(((((((((1.0 2.0 +) 3.0 *) 4.0 -) 5.0 |) 2 ^) 7.0 +) 8.0 *) 9.0 -) 10.0 |) MEGA_EXPR)
# Aninhamento profundo de parênteses (7 níveis)
(((((((100 10 -) 5 +) 2 *) 3 /) 1 +) 2 -) 4 *) DEEP_NEST)

# === SEÇÃO 4: EXPRESSÃO COM TODOS OS 7 OPERADORES ===
# + - * / % ^ | todos numa linha (ordem ajustada para evitar real antes de %)
((((((10 5 +) 2 -) 3 *) 4 /) 7 %) 2 ^) 6.0 |) ALL_OPERATORS)

# === SEÇÃO 5: INICIALIZAÇÃO DE MÚLTIPLAS VARIÁVEIS ===
# 15 variáveis para testar memória
(1 VAR_A)
(2 VAR_B)
(3 VAR_C)
(4 VAR_D)
(5 VAR_E)
(6 VAR_F)
(7 VAR_G)
(8 VAR_H)
(9 VAR_I)
(10 VAR_J)
(11.5 VAR_K)
(12.5 VAR_L)
(13.0 VAR_M)
(14.0 VAR_N)
(15.0 VAR_O)

# === SEÇÃO 6: EXPRESSÃO COM 10+ VARIÁVEIS ===
# Teste de uso massivo de memória
((((VAR_A VAR_B +) (VAR_C VAR_D +) +) ((VAR_E VAR_F +) (VAR_G VAR_H +) +) +) (((VAR_I VAR_J +) (VAR_K VAR_L +) +) ((VAR_M VAR_N +) VAR_O +) +) +) MEGA_SUM)

# === SEÇÃO 7: REUTILIZAÇÃO INTENSIVA DE VARIÁVEIS ===
(100 REUSE)
((REUSE 2 |) REUSE)
((REUSE 10 +) REUSE)
((REUSE 3 -) REUSE)
((REUSE 2 *) REUSE)
((REUSE 7 %) REUSE)

# === SEÇÃO 8: LOOPS ANINHADOS - FOR DENTRO DE WHILE ===
# NOTA: Esta seção revela limitação no analisador semântico com FOR aninhado
# (0 TOTAL_LOOP)
# ((TOTAL_LOOP 3 <) (((1) (5) (1) (((TOTAL_LOOP I +) TOTAL_LOOP)) FOR)) WHILE)

# === SEÇÃO 9: WHILE ANINHADOS (2 NÍVEIS) ===
(0 OUTER_A)
((OUTER_A 3 <) (((OUTER_A 1 +) OUTER_A)) WHILE)

# === SEÇÃO 10: FOR ANINHADOS (DUPLO FOR) ===
# NOTA: FOR aninhado revela limitação no analisador semântico atual
# (0 SUM_MATRIX)
# ((1) (4) (1) (((1) (4) (1) (((SUM_MATRIX 1 +) SUM_MATRIX)) FOR)) FOR)

# === SEÇÃO 11: IFELSE COM RAMOS SIMPLES ===
(50 BRANCH_TEST)
((BRANCH_TEST 30 >) ((100)) ((200)) IFELSE)

# === SEÇÃO 12: CONDIÇÕES COMPLEXAS (4+ OPERADORES) ===
(20 COND_A)
(5 COND_B)
(3 COND_C)
((((COND_A 10 >) (COND_B 5 <) &&) ((COND_C 3 ==) !) ||) (999) (111) IFELSE) COMPLEX_COND)

# === SEÇÃO 13: FOR COM STEP NEGATIVO (CONTAGEM REGRESSIVA) ===
(0 DOWN_SUM)
((10) (1) (-1) (((DOWN_SUM K +) DOWN_SUM)) FOR)

# === SEÇÃO 14: WHILE COM CONDIÇÃO TRIPLA ===
(10 TRIP_A)
(5 TRIP_B)
(1 TRIP_C)
((((TRIP_A 5 >) (TRIP_B 10 <) &&) (TRIP_C 0 !=) &&) (((TRIP_A 1 -) TRIP_A)) WHILE)

# === SEÇÃO 15: PROMOÇÃO DE TIPOS DENTRO DE LOOP ===
(1 INT_TO_REAL)
((INT_TO_REAL 100.0 <) (((INT_TO_REAL 1.5 *) INT_TO_REAL)) WHILE)

# === SEÇÃO 16: CRIAR HISTÓRICO LONGO PARA RES ===
(101.0 HIST_1)
(102.0 HIST_2)
(103.0 HIST_3)
(104.0 HIST_4)
(105.0 HIST_5)
(106.0 HIST_6)
(107.0 HIST_7)
(108.0 HIST_8)
(109.0 HIST_9)
(110.0 HIST_10)
(111.0 HIST_11)
(112.0 HIST_12)
(113.0 HIST_13)
(114.0 HIST_14)
(115.0 HIST_15)

# === SEÇÃO 17: RES PROFUNDO (10+ LINHAS) ===
(10 RES)
(11 RES)
(12 RES)
(13 RES)
(14 RES)
(15 RES)

# === SEÇÃO 18: CADEIA DE RES COMPLEXA ===
((1 RES) (2 RES) +)
((1 RES) (3 RES) *)
((2 RES) (1 RES) -)

# === SEÇÃO 19: RES DENTRO DE LOOP ===
(10 RES_START)
(0 RES_COUNTER)
((RES_COUNTER 3 <) (((1 RES) RES_RETRIEVED)) WHILE)

# === SEÇÃO 20: ANINHAMENTO EXTREMO (4 NÍVEIS) ===
# NOTA: Aninhamento extremo FOR→WHILE→IFELSE→IFELSE revela limitação no analisador
# (0 EXTREME_OUTER)
# ((0) (3) (1) (((EXTREME_OUTER 5 <) ((((EXTREME_OUTER 2 %) 0 ==) ((((EXTREME_OUTER 3 %) 0 ==) (999) (111) IFELSE)) ((222)) IFELSE) ((EXTREME_OUTER 1 +) EXTREME_OUTER)) WHILE)) FOR)

# === SEÇÃO 21: COMBINAÇÃO EXTREMA - RES + MEM + OPERADORES ===
((((3 RES) (4 RES) +) 2.0 *) COMBO_VAR)
((COMBO_VAR 100 >) (COMBO_VAR) (0) IFELSE) COMBO_RESULT)
